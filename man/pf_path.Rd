% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_path.R
\name{pf_path}
\alias{pf_path}
\title{PF: path reconstruction}
\usage{
pf_path(
  .history,
  .bathy = NULL,
  .obs = NULL,
  .cols = NULL,
  .return = c("long", "wide"),
  .verbose = getOption("patter.verbose")
)
}
\arguments{
\item{.history}{Particle samples from the particle filter, provided in any format accepted by \code{\link[=.pf_history_list]{.pf_history_list()}}. Particle samples must contain \code{cell_past} and \code{cell_now} columns.}

\item{.bathy}{(optional) If \code{.return = "long"}, a bathymetry \code{\link{SpatRaster}} can be supplied to define cell coordinates (see \code{\link[=pf_path_pivot]{pf_path_pivot()}}).}

\item{.obs, .cols}{(optional) If \code{.return = "long"}, \code{.obs} and \code{.cols} are a \code{\link{data.table}} and a \code{character} vector of column names in \code{.obs} to match onto the output (see \code{\link[=pf_path_pivot]{pf_path_pivot()}}).}

\item{.return}{A \code{character} that defines the return format:
\itemize{
\item \code{long} specifies a long-format \code{\link{data.table}} that defines path IDs, time steps and associated locations (see \code{\link[=pf_path_pivot]{pf_path_pivot()}}).
\item \code{wide} specifies a wide-format \code{\link{data.table}}, with:
\itemize{
\item one row for each path;
\item one column for each time step (named \code{x1}, \code{x2}, etc.);
}
}}

\item{.verbose}{User output control (see \code{\link{patter-progress}} for supported options).}
}
\value{
The function returns a long- or wide-format \code{\link{data.table}} (see \code{.return}).
}
\description{
This function implements the path-reconstruction algorithm.
}
\details{
The path reconstruction algorithm 'chains' sequential particle samples into movement paths. This function evolved from \href{https://edwardlavender.github.io/flapper/reference/pf_simplify.html}{\code{flapper::pf_simplify()}}. This implementation uses the fast \code{\link[collapse:join]{collapse::join()}} function.
}
\examples{
#### Set up examples using pre-defined datasets
gebco       <- dat_gebco()
obs         <- dat_obs()
out_pfbk    <- dat_pfbk()
pfbk_folder <- dat_pfbk_src()

#### Example (1): Implement pf_path() from `pf` object
p1 <- pf_path(out_pfbk$history)

#### Example (2): Implement pf_path from parquet files
p2 <- pf_path(pf_files(pfbk_folder))
stopifnot(isTRUE(all.equal(p1, p2)))

#### Example (3): Include cell coordinates/obs columns
p3 <- pf_path(out_pfbk$history, gebco, obs, .cols = "depth")
head(p3)

#### Example (4): Adjust standard `patter-progress` options
# Use a log.txt file
log.txt <- tempfile(fileext = ".txt")
p4 <- pf_path(out_pfbk$history, .verbose = log.txt)
readLines(log.txt)
unlink(log.txt)
# Suppress `.verbose`
p4 <- pf_path(out_pfbk$history, .verbose = FALSE)
# Suppress progress bar
pbo <- pbapply::pboptions(type = "n")
p4 <- pf_path(out_pfbk$history)
pbapply::pboptions(pbo)

#### Example (5): Examine outputs
# Load packages
require(data.table)
require(dtplyr)
require(dplyr, warn.conflicts = FALSE)
# Compute (Euclidean) distances between sequential samples
gebco <- dat_gebco()
p5 <-
  p3 |>
  group_by(path_id) |>
  mutate(dist = dist_along_path(cbind(cell_x, cell_y))) |>
  as.data.table()
max(p5$dist, na.rm = TRUE)
# Visualise example path
terra::plot(gebco)
path_1 <- p5[p5$path_id == 1, ]
s <- seq_len(nrow(path_1))
arrows(x0 = path_1$cell_x[s], x1 = path_1$cell_x[s + 1],
       y0 = path_1$cell_y[s], y1 = path_1$cell_y[s + 1],
       length = 0.02)

#### Example (6): Change output format
p6 <- pf_path(out_pfbk$history, .return = "wide")
str(p6)
}
\seealso{
The forward filtering--backward sampling algorithm samples locations (particles) that represent the possible locations of an individual through time, accounting for all data and the individual's movement.
\itemize{
\item To set up data, use \code{\link[=pat_setup_data]{pat_setup_data()}}.
\item \code{\link[=pf_forward]{pf_forward()}} implements the forward filter:
\itemize{
\item To set up an observations timeline, use \code{\link[=pf_setup_obs]{pf_setup_obs()}}.
\item For proposal (movement) models, see \code{\link{pf_propose}}.
\item For likelihood functions, to evaluate the likelihood of the data at proposal locations, see \code{\link{pf_lik}}.
\item For sampling functions, to (re)sample plausible proposal locations, see \code{\link{pf_sample}}.
\item For tuning parameters, see \code{\link{pf_opt}}.
}
\item \code{\link[=pf_backward_*]{pf_backward_*()}} refines outputs from the forward filter:
\itemize{
\item \code{\link[=pf_backward_killer]{pf_backward_killer()}} removes dead-ends;
\item \code{\link[=pf_backward_sampler]{pf_backward_sampler()}} implements the backward sampler;
}
\item To reconstruct movement paths from particle samples, use \code{\link[=pf_path]{pf_path()}}.
\item To map emergent patterns of space use, use \code{\link[=pf_coord]{pf_coord()}} plus a \verb{map_*()} function, such as \code{\link[=map_pou]{map_pou()}}, \code{\link[=map_dens]{map_dens()}} and/or \code{\link{map_hr}}\verb{_()}.
\item For additional utilities, see supporting \verb{pf_*()} functions, such as \code{\link[=pf_plot_history]{pf_plot_history()}}, \code{\link[=pf_files]{pf_files()}} and \code{\link[=pf_files_size]{pf_files_size()}}.
}
}
\author{
Edward Lavender
}
