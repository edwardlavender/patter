% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_backward_killer.R
\name{pf_backward_killer}
\alias{pf_backward_killer}
\title{PF: run the backward pass}
\usage{
pf_backward_killer(.history, .record = pf_opt_record(), .verbose = TRUE)
}
\arguments{
\item{.history}{Particle samples from the forward simulation, provided either as:
\itemize{
\item A \code{list} of \code{\link{data.table}}s that define cell samples; i.e., the \code{history} element of a \code{\linkS4class{pf}} object. This must contain columns that define cell samples at each time step (\code{cell_now}) alongside previous samples (\code{cell_past}).
\item An ordered list of file paths (from \code{\link[=pf_setup_files]{pf_setup_files()}}) that define the directories in which particle samples were written from the forward simulation (as parquet files).
}}

\item{.verbose}{Arguments to monitor function progress (see \code{\link[=pf_forward]{pf_forward()}}).}

\item{.save_history}{A logical variable that defines whether or not to save updated particle samples in memory (see \code{\link[=pf_forward]{pf_forward()}}).}

\item{.write_history}{A named list, passed to \code{\link[arrow:write_parquet]{arrow::write_parquet()}}, to write updated particle samples to file (see \code{\link[=pf_forward]{pf_forward()}}).}
}
\value{
The function returns a \code{\linkS4class{pf}} object.
}
\description{
This function implements the backward correction of particle samples.
}
\details{
At the time of writing, this function only removes 'dead ends' from particle samples. Backwards smoothing is not currently implemented.
}
\examples{
#### Set up examples
# Run the forward simulation (see ?`pf_forward()`)
# We will use example outputs objects:
out_pff    <- dat_pff()
pff_folder <- system.file("extdata", "acpf", "forward",
                          package = "patter", mustWork = TRUE)

#### Example (1): Implement backward simulation from object in memory
out_pfb <- pf_backward_killer(.history = out_pff$history,
                              .record = pf_opt_record(.save = TRUE))

#### Example (2): Implement backward simulation from parquet files
pff_folder_h <- file.path(pff_folder, "history")
out_pfb <- pf_backward_killer(.history = pf_setup_files(pff_folder_h),
                              .record = pf_opt_record(.save = TRUE))

#### Example (3): Write history to file (as in `pf_forward()`)
con        <- file.path(tempdir(), "patter")
pfb_folder <- file.path(con, "pf", "backward")
dir.create(pfb_folder, recursive = TRUE)
out_pfb <- pf_backward_killer(.history = pf_setup_files(pff_folder_h),
                              .record = pf_opt_record(.sink = pfb_folder))
utils::head(list.files(pfb_folder))

#### Example (4): Adjust standard `patter-progress` options
# Use a log.txt file
log.txt <- tempfile(fileext = ".txt")
out_pfb <- pf_backward_killer(pf_setup_files(pff_folder_h),
                              .record = pf_opt_record(.save = TRUE),
                              .verbose = log.txt)
utils::head(readLines(log.txt), 15)
unlink(log.txt)
# Suppress `.verbose`
out_pfb <- pf_backward_killer(pf_setup_files(pff_folder_h),
                              .record = pf_opt_record(.save = TRUE),
                              .verbose = FALSE)
# Suppress progress bar
pbo <- pbapply::pboptions(type = "n")
out_pfb <- pf_backward_killer(pf_setup_files(pff_folder_h),
                              .record = pf_opt_record(.save = TRUE))

# Clean up
unlink(con, recursive = TRUE)
}
\seealso{
TO DO
}
\author{
Edward Lavender
}
