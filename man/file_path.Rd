% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-file.R
\name{file_path}
\alias{file_path}
\alias{file_list}
\alias{file_size}
\alias{file_cleanup}
\title{Utilities: \code{file} helpers}
\usage{
file_path(...)

file_list(.sink, .folder = NULL, ...)

file_size(.sink, .folder = NULL, ..., .unit = c("MB", "GB", "TB"))

file_cleanup(.sink)
}
\arguments{
\item{...}{In \code{\link[=file_path]{file_path()}}, \code{...} is passed to \code{\link[=file.path]{file.path()}}. Otherwise, \code{...} is a placeholder for additional arguments passed to \code{\link[=list.files]{list.files()}}, such as \code{pattern}, excluding \code{full.names}.}

\item{.sink}{A \code{character} string that defines the directory in which files are located.}

\item{.folder}{(optional) A \code{character} string that defines the name of a sub-folder for which to list files (via \code{\link[=file_list]{file_list()}}) or summarise file sizes (via \code{\link[=file_size]{file_size()}}).}

\item{.unit}{For \code{\link[=file_size]{file_size()}}, \code{.unit} is a \code{character} string that defines the units of the output (\code{MB}, \code{GB}, \code{TB}).}
}
\value{
\itemize{
\item \code{\link[=file_path]{file_path()}} returns a \code{character} string that defines the file path.
\item \code{\link[=file_list]{file_list()}} returns an ordered vector of file paths.
\item \code{\link[=file_size]{file_size()}} returns a number.
\item \code{\link[=file_cleanup]{file_cleanup()}} returns \code{invisible(NULL)}.
}
}
\description{
These are simple file system utilities.
}
\details{
\itemize{
\item \code{\link[=file_path]{file_path()}} is a simple wrapper for \code{\link[=file.path]{file.path()}} constructs a file path and verifies that it exists.
\item \code{\link[=file_list]{file_list()}} creates an ordered \code{list} of numbered files. This function expects files to be named \verb{1.\{.ext\}}, \verb{2.\{.ext\}}, ..., \verb{N.\{.ext\}}. All listed files must share the same file extension.
\item \code{\link[=file_size]{file_size()}} calculates the total size of files in a directory.
\item \code{\link[=file_cleanup]{file_cleanup()}} deletes temporary files and or directories recursively;
}
}
\examples{
# Set up example
temp <- tempdir()
sink <- file.path(tempdir(), "patter")
dir.create(sink, recursive = TRUE)
write.table("", file = file.path(sink, "1.csv"))
write.table("", file = file.path(sink, "2.csv"))

# Use `file_path()` to construct & validate file paths
file_path(temp, "patter")

# Use `file_list()` to list files
file_list(temp, "patter", pattern = "*.csv$")

# Use `file_size()` to summarise file sizes
file_size(temp, "patter")
file_size(temp, "patter", .unit = "GB")
file_size(temp, "patter", .unit = "TB")

file_cleanup(sink)
}
\author{
Edward Lavender
}
