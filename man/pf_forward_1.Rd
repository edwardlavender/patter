% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_forward_1.R
\name{pf_forward_1}
\alias{pf_forward_1}
\title{PF: run the forward simulation}
\usage{
pf_forward_1(
  .obs,
  .bathy,
  .record,
  .kick,
  ...,
  .lonlat = FALSE,
  .n = 100L,
  .save_history = FALSE,
  .write_history = NULL,
  .progress = TRUE,
  .prompt = FALSE,
  .verbose = TRUE,
  .txt = ""
)
}
\arguments{
\item{.obs}{A \code{\link{data.table}} that defines the time series of observations (see \code{\link[=acs]{acs()}}). For \code{\link[=pf_forward_1]{pf_forward_1()}}, at a minimum, this must contain the following column(s):
\itemize{
\item \code{timestep}---an \code{integer} that defines the time step;
\item Any columns required by \code{.kick} (see below);
}}

\item{.bathy}{(optional) A \code{\link{SpatRaster}} over the region of interest, optionally used by \code{.kick()}.}

\item{.record}{A list of \code{\link{SpatRaster}}s, or a character vector of file paths to \code{\link{SpatRaster}}s (see \code{\link[=pf_setup_files]{pf_setup_files()}}), that define the set of possible locations of the individual according to the data (i.e., an AC* algorithm).}

\item{.kick, .lonlat, ...}{A function, and associated inputs, used to 'kick' particles into new (proposal) locations. \code{.kick} must support the following inputs:
\itemize{
\item \code{.particles}---a \code{\link{data.table}} that defines the \code{cell} IDs and associated coordinates (\code{x_now} and \code{y_now}) of current particle samples;
\item (optional) \code{.obs}---the \code{.obs} \code{\link{data.table}};
\item (optional) \code{.t}---the \code{timestep} (used to index \code{.obs});
\item (optional) \code{.bathy}---the bathymetry \code{\link{SpatRaster}};
\item (optional) \code{.lonlat}---a \code{logical} variable that define whether or not particle samples are longitude/latitude or planar coordinates;
\item (optional) \code{...}---additional arguments, passed via \code{\link[=pf_forward_1]{pf_forward_1()}}, if required;
}

See \code{\link[=pf_kick]{pf_kick()}} for a template random walk movement model. In this function, \code{...} are passed to \code{\link[=rlen]{rlen()}} and \code{\link[=rangrw]{rangrw()}}.}

\item{.n}{An \code{integer} that defines the number of particle samples at each time step.}

\item{.save_history}{A logical variable that defines whether or not to save particle samples in the \code{history} element of the output. This is only sensible for small-scale applications (i.e., short time series and few particles).}

\item{.write_history}{A named list, passed to \code{\link[arrow:write_parquet]{arrow::write_parquet()}}, to save particle samples to file at each time step. The \code{sink} argument should be the directory in which to write files. Files are named by \code{.obs$timestep} (i.e., \verb{1.parquet}, \verb{2.parquet}, ..., \code{N.parquet}).}

\item{.progress}{A logical variable that defines whether or not to implement a progress bar (via \code{\link[progress:progress_bar]{progress::progress_bar()}}).}

\item{.prompt, .verbose, .txt}{Controls on function prompts and messages (see \code{\link[=acs]{acs()}}).}
}
\value{
The function returns a \code{\linkS4class{pf}} object.
}
\description{
This function implements forward simulation of possible locations.
}
\details{
The forward simulation is implemented as follows:
\enumerate{
\item At each time step, \code{.n} grid cells (particles) are sampled (at \code{t = 1}) or resampled from a set of proposals (at subsequent time steps) with replacement, in line with AC* weights;
\item The previous locations (\code{NA} for \code{t = 1}) and the (accepted) current locations are recorded;
\item Each particle is 'kicked' into new (proposal) location (grid cell), by the movement model;
\item Steps 1--3 are repeated until the end of the time series;
}
}
\examples{
#### Set up examples
# Use pre-prepared datasets
obs       <- dat_obs()
overlaps  <- dat_overlaps()
kernels   <- dat_kernels()
gebco     <- dat_gebco()
con       <- tempdir()
# Implement AC-branch (e.g., AC) algorithm with default settings
ac_folder <- file.path(con, "patter", "ac")
dir.create(ac_folder, recursive = TRUE)
out_ac <-
  acs(obs,
      .bathy = gebco,
      .detection_overlaps = overlaps,
      .detection_kernels = kernels,
      .save_record = TRUE,
      .write_record = list(filename = ac_folder, overwrite = TRUE))

#### Example (1): Implement pf_forward_1() with default options
out_pff <- pf_forward_1(.obs = obs,
                        .record = out_ac$record,
                        .n = 1e3,
                        .kick = pf_kick,
                        .bathy = gebco,
                        .save_history = TRUE)
# The function returns a named list:
summary(out_pff)

#### Example (2): Pass a list of SpatRasters to `.record`
files <- pf_setup_files(ac_folder)
out_pff <- pf_forward_1(.obs = obs,
                        .record = files,
                        .n = 1e3,
                        .kick = pf_kick,
                        .bathy = gebco,
                        .save_history = TRUE)

#### Example (3): Write history to file (similar to `acs()`)
pff_folder <- file.path(con, "patter", "pf", "forward")
dir.create(pff_folder, recursive = TRUE)
pf_forward_1(.obs = obs,
             .record = out_ac$record,
             .n = 1e3,
             .kick = pf_kick,
             .bathy = gebco,
             .save_history = TRUE,
             .write_history = list(sink = pff_folder))
utils::head(pf_setup_files(pff_folder))

#### Example (4): Customise verbose options (as in acs())
# Suppress progress bar
out_pff <- pf_forward_1(.obs = obs,
                        .record = out_ac$record,
                        .n = 1e3,
                        .kick = pf_kick,
                        .bathy = gebco,
                        .save_history = TRUE,
                        .progress = FALSE)
# Use prompt = TRUE for debugging
if (interactive()) {
  out_pff <- pf_forward_1(.obs = obs,
                          .record = out_ac$record,
                          .n = 1e3,
                          .kick = pf_kick,
                          .bathy = gebco,
                          .save_history = TRUE,
                          .prompt = TRUE)
}
# Use `.txt` to write messages to file
log.txt <- tempfile(fileext = ".txt")
out_pff <-
  pf_forward_1(.obs = obs,
               .record = out_ac$record,
               .n = 1e3,
               .kick = pf_kick,
               .bathy = gebco,
               .txt = log.txt,
               .save_history = TRUE)
readLines(log.txt) |> utils::head()

#### Example (5): Customise movement model
# Modify `.kick()` to use alternative movement models, e.g.:
# * Use random walk
# * Use correlated random walk
# * Use temporally varying movement model
# * Use spatio-temporal movement model

#### Example (6): Implement the backward pass
# `pf_forward_1()` should be followed by `pf_backward()`

# Clean up
unlink(file.path(con, "patter"), recursive = TRUE)
}
\seealso{
\itemize{
\item The PF (forward simulation) is implemented by \code{\link[=pf_forward_*]{pf_forward_*()}}:
\itemize{
\item \code{\link[=pf_forward_1]{pf_forward_1()}} refines AC-branch algorithm (\code{\link[=acs]{acs()}} and \code{\link[=dc]{dc()}}) outputs using PF;
\item \code{\link[=pf_forward_2]{pf_forward_2()}} is an integrated implementation that couples AC- and PF-branch algorithms internally;
}
\item PF is supported by:
\itemize{
\item Setup helpers, namely \code{\link[=pf_setup_files]{pf_setup_files()}};
\item Template movement models, namely \code{\link[=pf_kick]{pf_kick()}};
}
\item The backward pass is implemented by \code{\link[=pf_backward]{pf_backward()}};
\item Movement paths are built from PF outputs via \code{pf_path()} functions:
\itemize{
\item \code{\link[=pf_path]{pf_path()}} reconstructs paths;
\item \code{\link[=pf_path_pivot]{pf_path_pivot()}} supports path reconstruction;
}
\item To reconstruct maps of space use, see:
\itemize{
\item \code{\link[=pf_coords]{pf_coords()}} to extract particle coordinates;
\item \code{\link[=pf_map_pou]{pf_map_pou()}} for probability-of-use maps;
\item \code{\link[=pf_map_dens]{pf_map_dens()}} for smooth utilisation distributions;
\item \code{\link[=get_hr]{get_hr()}} for home range estimates;
}
}
}
\author{
Edward Lavender
}
