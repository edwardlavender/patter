% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_plot.R
\name{pf_plot_history}
\alias{pf_plot_history}
\title{PF: plot particle histories}
\usage{
pf_plot_history(
  .dlist,
  .forward,
  .backward = NULL,
  .steps = NULL,
  .png = NULL,
  .add_surface = list(),
  .add_forward = list(),
  .prompt = FALSE
)
}
\arguments{
\item{.dlist}{A named \code{list} of data and parameters from \code{\link[=pat_setup_data]{pat_setup_data()}}. This function requires:
\itemize{
\item \code{.dlist$spatial$bathy}, which defines the grid onto which particle samples are mapped;
}}

\item{.forward}{Particle samples, provided in any format accepted by \code{\link[=.pf_history_list]{.pf_history_list()}}. Particle samples should be from \code{\link[=pf_forward]{pf_forward()}} if \code{.backward} is supplied. \code{cell_now}, \code{x_now} and \code{y_now} columns are required.}

\item{.backward}{(optional) If .\code{forward} contains particle samples from the forward run, \code{.backward} can contain particle samples from the backward pass (e.g., \code{\link[=pf_backward_killer]{pf_backward_killer()}}), provided in any format accepted by \code{\link[=.pf_history_list]{.pf_history_list()}}. The \code{cell_now} column is required.}

\item{.steps}{\code{NULL} or an \code{integer} vector of the time steps for which to map particle samples. \code{NULL} specifies all time steps.}

\item{.png}{(optional) A named \code{list}, passed to \code{\link[grDevices:png]{grDevices::png()}}, to save plots to file. Files are named \verb{\{.steps[1]\}.png, \{.steps[2]\}.png, ..., \{.steps[N]\}.png}.}

\item{.add_surface, .add_forward}{Named \code{list}s for plot customisation.
\itemize{
\item \code{.add_surface} is passed to \code{\link[terra:plot]{terra::plot()}}, excluding \code{x} and \code{main}.
\item \code{.add_forward} is passed to \code{\link[graphics:points]{graphics::points()}}, excluding \code{x} and \code{y}.
}}

\item{.prompt}{A \code{logical} variable that defines whether or not to prompt the user for input between plots. This is only used if \code{.png = NULL} (and there are multiple time steps).}
}
\value{
The function is called for its side effects. It returns \code{invisible(TRUE)}.
}
\description{
This function maps particle histories for selected time steps or entire time series and can be used to create animations.
}
\details{
For each \code{.step}, \code{\link[terra:plot]{terra::plot()}} is used to plot \code{.dlist$spatial$bathy}. Particle samples in \code{.forward} are added onto the grid via \code{\link[graphics:points]{graphics::points()}}. If \code{.backward} is supplied, particles in \code{.forward} should be derived from the forward run. Particles in \code{.forward} but not \code{.backward} (i.e., dead ends) are shown in red (unless \code{.add_forward$col} is overridden).

This function replaces \href{https://edwardlavender.github.io/flapper/reference/pf_plot_history.html}{\code{flapper::pf_plot_history()}}.
}
\examples{
#### Set up
# Define directories
con    <- file.path(tempdir(), "patter")
frames <- file.path(con, "frame")
mp4s   <- file.path(con, "mp4")
dir.create(frames, recursive = TRUE)
dir.create(mp4s, recursive = TRUE)
# Define data list
dlist <- dat_dlist()

#### Example (1): Plot selected samples (from the forward run)
# Use particles in memory
pf_plot_history(.dlist = dlist,
                .forward = dat_pff(),
                .steps = 1L)
# Use the `history` list directly
pf_plot_history(.dlist = dlist,
                .forward = dat_pff()$history,
                .steps = 1L)
# Use a directory
pf_plot_history(.dlist = dlist,
                .forward = dat_pff_src(),
                .steps = 1L)
# Use a list of files
pf_plot_history(.dlist = dlist,
                .forward = pf_files(dat_pff_src()),
                .steps = 1L)

#### Example (2): Plot selected samples (from the backward pass)
pf_plot_history(.dlist = dlist,
                .forward = dat_pfbk(),
                .steps = 1L)

#### Example (3) Plot particles from both forward and backward runs
# Dead ends are shown in red
pf_plot_history(.dlist = dlist,
                .forward = dat_pff(),
                .backward = dat_pfbk(),
                .steps = 1L)

#### Example (4): Plot multiple time steps
# Specify selected steps
pf_plot_history(.dlist = dlist,
                .forward = dat_pfbk(),
                .steps = 1:5L)
# Plot all steps (default: .step = NULL)
pf_plot_history(.dlist = dlist,
                .forward = dat_pfbk())
# Use `.prompt = TRUE`
pf_plot_history(.dlist = dlist,
                .forward = dat_pfbk(),
                .prompt = TRUE)

#### Example (5): Customise the plot
# Customise the SpatRaster surface
pf_plot_history(.dlist = dlist,
                .forward = dat_pfbk(),
                .steps = 1L,
                .add_surface = list(col = grDevices::cm.colors(256)))
# Customise the particle samples
pf_plot_history(.dlist = dlist,
                .forward = dat_pfbk(),
                .steps = 1L,
                .add_forward = list(pch = ".", col = "blue"))

#### Example (6): Write images to file
pf_plot_history(.dlist = dlist,
                .forward = dat_pff(),
                .backward = dat_pfbk(),
                .add_forward = list(pch = 21, cex = 0.5),
                .png = list(filename = frames))

#### Example (7): make animations
if (rlang::is_installed("av")) {

  # There are lots of tools to create animations:
  # * `av::av_encode_video()`       # uses ffmpeg
  # * `animation::saveVideo()`      # uses ffmpeg
  # * `magick::image_write_video()` # wraps av()
  # * `glatos::make_video()`        # wraps av()

  # Helper function to open (mp4) files
  Sys.open <- function(.file) {
    if (.Platform$OS.type == "Windows") {
      cmd <- paste("start", shQuote(.file))
    } else {
      cmd <- paste("open", shQuote(.file))
    }
    system(cmd)
  }

  # Use av::av_encode_video()
  # * This is one of the faster options
  input   <- unlist(pf_files(frames))
  output  <- file.path(mp4s, "ani.mp4")
  av::av_encode_video(input, output, framerate = 10)
  # Sys.open(output)

}

# Clean up
unlink(con, recursive = TRUE)
}
\seealso{
The forward filtering--backward sampling algorithm samples locations (particles) that represent the possible locations of an individual through time, accounting for all data and the individual's movement.
\itemize{
\item To set up data, use \code{\link[=pat_setup_data]{pat_setup_data()}}.
\item \code{\link[=pf_forward]{pf_forward()}} implements the forward filter:
\itemize{
\item To set up an observations timeline, use \code{\link[=pf_setup_obs]{pf_setup_obs()}}.
\item For proposal (movement) models, see \code{\link{pf_propose}}.
\item For likelihood functions, to evaluate the likelihood of the data at proposal locations, see \code{\link{pf_lik}}.
\item For sampling functions, to (re)sample plausible proposal locations, see \code{\link{pf_sample}}.
\item For tuning parameters, see \code{\link{pf_opt}}.
}
\item \code{\link[=pf_backward_*]{pf_backward_*()}} refines outputs from the forward filter:
\itemize{
\item \code{\link[=pf_backward_killer]{pf_backward_killer()}} removes dead-ends;
\item \code{\link[=pf_backward_sampler]{pf_backward_sampler()}} implements the backward sampler;
}
\item To reconstruct movement paths from particle samples, use \code{\link[=pf_path]{pf_path()}}.
\item To map emergent patterns of space use, use \code{\link[=pf_coord]{pf_coord()}} plus a \verb{map_*()} function, such as \code{\link[=map_pou]{map_pou()}}, \code{\link[=map_dens]{map_dens()}} and/or \code{\link{map_hr}}\verb{_()}.
\item For additional utilities, see supporting \verb{pf_*()} functions, such as \code{\link[=pf_plot_history]{pf_plot_history()}}, \code{\link[=pf_files]{pf_files()}} and \code{\link[=pf_files_size]{pf_files_size()}}.
}
}
\author{
Edward Lavender
}
