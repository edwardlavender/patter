% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-internal-cl.R
\name{cl}
\alias{cl}
\alias{cl_lapply}
\alias{cl_check}
\alias{cl_cores}
\alias{cl_chunks}
\alias{cl_export}
\alias{cl_stop}
\title{Parallelisation helpers}
\usage{
cl_lapply(
  .x,
  .fun,
  ...,
  .cl = NULL,
  .varlist = NULL,
  .envir = .GlobalEnv,
  .use_chunks = FALSE,
  .combine = NULL
)

cl_check(.cl = NULL, .varlist = NULL)

cl_cores(.cl = NULL)

cl_chunks(.cl = NULL, .length)

cl_export(.cl = NULL, .varlist = NULL, .envir = .GlobalEnv)

cl_stop(.cl = NULL)
}
\arguments{
\item{.x}{A \code{list} over which to iterate.}

\item{.fun, ...}{A function that is applied to elements of \code{.x} and any additional named arguments.}

\item{.cl}{(optional) The cluster argument passed to \code{\link[pbapply:pbapply]{pbapply::pblapply()}}, supplied as:
\itemize{
\item A \code{cluster} object from \code{\link[parallel:makeCluster]{parallel::makeCluster()}} or a sister function;
\item An \code{integer} that defines the number of child processes;
}}

\item{.varlist}{(optional) A \code{character} vector of objects for export (see \code{\link[parallel:clusterApply]{parallel::clusterExport()}}).}

\item{.envir}{The \code{environment} from which to export variables (see \code{\link[parallel:clusterApply]{parallel::clusterExport()}}).}

\item{.use_chunks}{A \code{logical} vector that defines whether to parallelise or \code{.x} or batches of \code{.x} (chunks).
\itemize{
\item If \code{.use_chunks = FALSE}, function behaviour matches \code{\link[pbapply:pbapply]{pbapply::pblapply()}}.
\item If \code{.use_chunks = TRUE}, \code{.x} is split into a series of chunks that are processed in parallel; within each chunk \code{.x} is updated iteratively. This reduces the parallelisation overhead.
}}

\item{.combine}{If \code{.use_chunks = TRUE}, \code{.combine} is \code{function} that defines how to combine the results for each chunk (e.g., \code{purrr::list_flatten()}). \code{NULL} is permitted, in which case the chunk-specific outputs are not combined.}

\item{.length}{For \code{\link[=cl_chunks]{cl_chunks()}}, \code{.length} is an \code{integer} that defines the number of elements in the iteration.}
}
\value{
\itemize{
\item \code{\link[=cl_lapply]{cl_lapply()}} returns a \code{list}.
\item \code{\link[=cl_cores]{cl_cores()}} returns an \code{integer}.
\item \code{\link[=cl_chunks]{cl_chunks()}} returns a list of \code{integer}s.
\item \code{\link[=cl_check]{cl_check()}}, \code{\link[=cl_export]{cl_export()}} and \code{\link[=cl_stop]{cl_stop()}} return \code{invisible(NULL)}.
}
}
\description{
A set of internal wrappers for \code{\link[parallel:parallel-package]{parallel::parallel}} functions that facilitate the implementation of parallel routines in functions via \code{\link[pbapply:pbapply]{pbapply::pblapply()}}.
}
\details{
\code{\link[=cl_lapply]{cl_lapply()}} is a wrapper for \code{\link[pbapply:pbapply]{pbapply::pblapply()}} that handles cluster checking, set up, batch processing and cluster closure, using the following functions:
\itemize{
\item \code{\link[=cl_check]{cl_check()}} checks \code{.cl} and \code{.varlist} arguments, as inputted to a parent function. For example, if \code{.cl = NULL}, \code{.varlist} should also be \code{NULL}.
\item \code{\link[=cl_cores]{cl_cores()}} identifies the number of cores specified.
\item \code{\link[=cl_chunks]{cl_chunks()}} defines a \code{list}, with one element for core specified x 4, that contains an \code{integer} vector of the positions of an object over which to iterate serially in each chunk.
\item \code{\link[=cl_export]{cl_export()}} implements \code{\link[parallel:clusterApply]{parallel::clusterExport()}} if both \code{.cl} and \code{.varlist} are specified.
\item \code{\link[=cl_stop]{cl_stop()}} implements \code{\link[parallel:makeCluster]{parallel::stopCluster()}} if \code{.cl} is a \code{cluster} object from \code{\link[parallel:makeCluster]{parallel::makeCluster()}}.
}

These routines evolved from the \href{https://edwardlavender.github.io/flapper/reference/cl.html}{\verb{cl_*()}} functions in \href{https://github.com/edwardlavender/flapper}{\code{flapper}}.
}
\seealso{
See \href{https://edwardlavender.github.io/flapper/reference/flapper-tips-parallel.html}{\code{flapper-tips-parallel}} for further information about parallelisation, including the differences between socket clusters and forking.
}
\author{
Edward Lavender
}
\keyword{internal}
