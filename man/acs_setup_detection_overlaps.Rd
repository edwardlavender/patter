% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/acs-setup.R
\name{acs_setup_detection_overlaps}
\alias{acs_setup_detection_overlaps}
\title{AC* set up: define detection container overlaps}
\source{
This function supersedes the \href{https://edwardlavender.github.io/flapper/reference/get_detection_containers_overlap.html}{\code{get_detection_containers_overlaps}} function in the \href{https://github.com/edwardlavender/flapper}{\code{flapper}} package.
}
\usage{
acs_setup_detection_overlaps(.moorings, .services = NULL)
}
\arguments{
\item{.moorings}{A \code{\link{data.table}} that defines receiver deployments and associated information (see \code{\link{dat_moorings}} for an example). At a minimum, this must contain the following columns:
\itemize{
\item \code{receiver_id}---an \code{integer} vector of receiver IDs;
\item \code{receiver_easting} and \code{receiver_northing} or \code{receiver_lon} and \code{receiver_lat}---doubles that define receiver coordinates on a planar coordinate reference system or in longitude/latitude;
\item \code{receiver_start}---a \code{Date} vector that defines receiver deployment dates;
\item \code{receiver_end}---a \code{Date} vector that defines receiver retrieval dates;
\item \code{receiver_range}---a double that defines the detection range (m) for each receiver;
}}

\item{.services}{(optional) A \code{\link{data.table}} that defines receiver IDs and servicing \code{Date}s (times during the deployment period of a receiver when it was not active due to servicing) (see \code{\link[=make_matrix_receivers]{make_matrix_receivers()}}). If provided, this must contain the following columns:
\itemize{
\item \code{receiver_id}---an \code{integer} vector of receiver IDs;
\item \code{service_start}---a \code{Date} vector that defines receiver servicing start dates;
\item \code{service_end}---a \code{Date} vector that defines receiver servicing completion dates;
}}
}
\value{
The function returns a nested \code{list}, with one element for all integers from \code{1:max(.moorings$receiver_id)}. Any elements that do not correspond to receivers contain a \code{NULL} element. List elements that correspond to receivers contain a \code{NULL} or a \code{list} that defines, for each deployment date with overlapping receiver(s), a vector of overlapping receiver(s).
}
\description{
This function identifies receivers with overlapping detection containers in space and time for the AC* algorithms.
}
\details{
In the AC* algorithms, at the moment of detection, the set of possible locations depends on the receiver(s) at which an individual is, and is not, detected. The outputs of this function are used to restrict the probability calculations to the set of receivers that overlap with the receiver(s) at which an individual is detected for improved efficiency.

At the time of writing (November 2023), the function permits receiver ranges to differ between receivers, but assumes they are constant in time.
}
\examples{
#### Example (1): Basic implementation
overlaps <- acs_setup_detection_overlaps(dat_moorings)
summary(overlaps)

}
\seealso{
AC-branch algorithms in \code{\link{patter}} include the AC* algorithm (\code{\link[=acs]{acs()}}) and the DC algorithm (\code{\link[=dc]{dc()}}).

To implement the AC* algorithm, use:
\enumerate{
\item \code{\link[=acs_setup_obs]{acs_setup_obs()}} to set up observations;
\item \code{\link[=acs_setup_detection_overlaps]{acs_setup_detection_overlaps()}} to identify receiver overlaps (used in detection probability calculations);
\item \code{\link[=acs_setup_detection_kernels]{acs_setup_detection_kernels()}} and \code{\link[=acs_setup_detection_pr]{acs_setup_detection_pr()}} to define detection probability kernels;
\item \code{\link[=acs]{acs()}} to implement the AC algorithm;
}

To implement the DC algorithm, use:
\enumerate{
\item \code{\link[=dc]{dc()}} to implement the algorithm;
}

AC-branch algorithms return an \code{\linkS4class{acb}} object.

AC-branch algorithms are typically followed by particle filtering to reconstruct movement paths and refine maps of space use (see \verb{pf_*()} functions).
\enumerate{
\item To begin, see \code{\link[=pf_forward_1]{pf_forward_1()}};
\item To implement AC- and PF-branch algorithms simultaneously, see \code{\link[=pf_forward_2]{pf_forward_2()}};
}
}
\author{
Edward Lavender
}
