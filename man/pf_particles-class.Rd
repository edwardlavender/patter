% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf-classes.R
\name{pf_particles-class}
\alias{pf_particles-class}
\title{PF: \code{\linkS4class{pf_particles}} objects}
\description{
An S3 class that defines the named \code{list} returned by \code{\link[=pf_forward]{pf_forward()}} and \code{\link[=pf_backward_killer]{pf_backward_killer()}}.
}
\section{Structure}{
\code{\linkS4class{pf_particles}} is a label used to denote outputs from selected functions in \code{\link{patter}}. The structure of this class is not strictly defined and primarily exists to streamline documentation. At the time of writing, \code{\linkS4class{pf_particles}} objects may comprise the following elements:
\itemize{
\item \code{history}---a \code{list} of particle samples;
\item \code{diagnostics}---a \code{\link{data.table}} of diagnostics;
\item \code{internal}---a \code{list} of internal objects;
\item \code{convergence}---a \code{logical} value that defines convergence success;
\item \code{time}---a \code{list} of timings;
}
}

\section{\code{history}}{
\code{history} is a \code{list} with one element for each time step. Each element is a \code{\link{data.table}} that contains location (particle) samples. Each row is a specific sample. The columns in this table depend on \code{\link[=pf_forward]{pf_forward()}}'s \code{.likelihood} function(s) and the \code{.record$cols} argument (see \code{\link[=pf_opt_record]{pf_opt_record()}}). By default, the following columns are computed:
\itemize{
\item \code{timestep}---an \code{integer} vector that defines the time step;
\item \code{cell_past}---an \code{integer} vector that identifies the grid cells of previous particle samples;
\item \code{x_past}, \code{y_past}---\code{numeric} vectors that define the coordinates of previous particle samples;
\item \code{cell_now}---an \code{integer} vector that identifies the grid cells of current particle samples;
\item \code{x_now}, \code{y_now}---\code{numeric} vectors that define the coordinates of current particle samples;
\item \code{lik}---a \code{numeric} vector of likelihoods;
\item \code{weight}---a \code{numeric} vector of sampling weights;
}

Coordinates are defined on the grid by the default proposal functions \code{\link[=pf_rpropose_kick]{pf_rpropose_kick()}} and \code{\link[=pf_rpropose_reachable]{pf_rpropose_reachable()}}.

The likelihood column (\code{lik}) is the product of the likelihood scores from each likelihood function. (Successive likelihood functions should \emph{update} this column.)

The weights column (\code{weight}) is equal to the \code{lik} column, for particles generated by stochastic kicks, or the normalised product of the \code{lik} and \code{dens} columns, in the case of directed sampling (see below).

Additional columns may be included in \code{history} if computed by inputted likelihood functions. At the time of writing, most default likelihood functions calculate likelihoods without defining additional columns. However, \code{\link[=pf_lik_dc]{pf_lik_dc()}} adds \code{bathy} column, with values extracted from \code{.dlist$spatial$bathy}.
If directed sampling is used, \code{bathy} and \code{dens} columns are included where required (after the first time step). \code{dens} is \code{numeric} vector that defines the probability density of moving from \verb{(x_past, y_past}) to \verb{(x_now, y_now)}.

Since columns are recorded only when required, not all columns are recorded at each time step. To combine \code{\link{data.table}}s, use \code{\link[=.pf_history_dt]{.pf_history_dt()}}.

If \code{.record$save = FALSE}, \code{.history} is an empty \code{list} and the individual \code{\link{data.table}}s are written to file in \verb{\{.record$sink\}/history/} (see \code{\link[=pf_opt_record]{pf_opt_record()}}).

\code{\link[=pf_backward_killer]{pf_backward_killer()}} simply drops dead-ends (rows) from the time series and leaves the columns from \code{\link[=pf_forward]{pf_forward()}} intact (unless \code{.record$cols} is supplied).
}

\section{\code{diagnostics}}{
In \code{\link[=pf_forward]{pf_forward()}}, we track metrics of particle diversity (hereafter, 'particle diagnostics') through time for analysis of convergence issues, sampling sufficiency and other properties (see \code{\link{pf_diag}}). Particle diagnostics are recorded for each trial and component of a stochastic process.

For stochastic kicks (implemented via \code{\link[=.pf_particles_kick]{.pf_particles_kick()}}), we record:
\itemize{
\item Proposal diagnostics, following stochastic kicks;
\item Likelihood diagnostics, following the evaluation of each likelihood function;
\item Sampling diagnostics, following sampling;
}

For directed sampling (implemented via \code{\link[=.pf_particles_sampler]{.pf_particles_sampler()}}), we record:
\itemize{
\item Proposal/likelihood diagnostics, following a combined proposal plus likelihood step;
\item Sampling diagnostics, following sampling;
}

Diagnostics are tracked for all trials, reversions and reruns (see \code{\link[=pf_opt_trial]{pf_opt_trial()}}) and never replaced. (This is so we can check, for instance, how many trials of a process, such as stochastic kick-based sampling, are required at each time step to generate a sufficient number of valid particles and, in so doing, improve algorithm efficiency.)

If \code{.record$save = TRUE}, particle diagnostics are collated in a single \code{\link{data.table}}, with the following columns:
\itemize{
\item \code{iter_m}---an \code{integer} that identifies 'manual' iterations. \code{iter_m} is incremented when \code{.rerun} is used.
\item \code{iter_i}---an \code{integer} that identifies 'internal' iterations. \code{iter_i} is incremented when the algorithm jumps back to an earlier time step (see \code{\link[=pf_opt_record]{pf_opt_record()}}).
\item \code{timestep}---an \code{integer} vector that defines time steps.
\item \code{component}---a \code{character} vector that defines algorithm components:
\itemize{
\item \code{proposal}---the proposal step (at the first time step and for stochastic kicks only);
\item \verb{lik_*}---the likelihood step;
\itemize{
\item For stochastic kicks, particle diagnostics are given following each (\code{i}) likelihood evaluation and the components are named by \code{paste0("lik-", names(.likelihood)[i])};
\item For directed sampling, particle diagnostics for the proposal and likelihood stages are combined under a single \code{lik-directed} label and not split by likelihood component;
}
\item \verb{sample_*}---the sampling step, denoted as:
\itemize{
\item \code{sample-origin} at the first time step;
\item \code{sample-kick} for stochastic kick-based sampling;
\item \code{sample-directed} for directed sampling;
}
}
\item \code{trial}---an \code{integer} vector that defines the trial of a stochastic process, if applicable (see \code{\link[=pf_opt_trial]{pf_opt_trial()}}).
\item \code{n}, \code{nu}, \code{ess}---particle diagnostics immediately following completion of each algorithm component, computed by internal \verb{.pf_diag_*()} functions:
\itemize{
\item \code{n}---an \code{integer} vector that defines the number of locations;
\item \code{nu}---an \code{integer} vector that defines the number of unique locations (see \code{\link[=.pf_diag_nu]{.pf_diag_nu()}}).
\item \code{ess}---a \code{numeric} vector that defines the effective sample size (see \code{\link[=.pf_diag_ess]{.pf_diag_ess()}}).
}
}

In \code{\link[=pf_forward]{pf_forward()}}, if \code{.record$save = FALSE}, \code{diagnostics} is \code{NULL} and the individual \code{\link{data.table}}s are written to file in \verb{\{.record$sink\}/diagnostics/} (see \code{\link[=pf_opt_record]{pf_opt_record()}}). To collate diagnostics from file, use \code{\link[=pf_forward_diagnostics]{pf_forward_diagnostics()}}.

At the time of writing, diagnostics are not computed on the fly by \code{\link[=pf_backward_*]{pf_backward_*()}} and are instead calculated post-hoc by \code{\link[=pf_backward_killer_diagnostics]{pf_backward_killer_diagnostics()}}.
}

\section{\code{internal}}{
For \code{\link[=pf_forward]{pf_forward()}}, \code{internal} is named list of internal objects for algorithm reruns (see \code{.rerun} and \code{\link[=.pf_startup]{.pf_startup()}}).
}

\section{\code{convergence}}{
For \code{\link[=pf_forward]{pf_forward()}}, \code{convergence} is a \code{logical} variable that defines whether or not the algorithm successfully converged (i.e., reached the end of the time series).
}

\section{\code{time}}{
A \code{list} that records the \code{start}, \code{end} and \code{duration} of algorithm runs (as \code{POSIXct} and \code{\link{difftime}} objects). For \code{\link[=pf_forward]{pf_forward()}}, this is a nested \code{list}, with one element for each manual algorithm run (see \code{.rerun}).
}

\seealso{
The forward filtering--backward sampling algorithm samples locations (particles) that represent the possible locations of an individual through time, accounting for all data and the individual's movement.
\itemize{
\item To set up data, use \code{\link[=pat_setup_data]{pat_setup_data()}}.
\item \code{\link[=pf_forward]{pf_forward()}} implements the forward filter:
\itemize{
\item To set up an observations timeline, use \code{\link[=pf_setup_obs]{pf_setup_obs()}}.
\item For proposal (movement) models, see \code{\link{pf_propose}}.
\item For likelihood functions, to evaluate the likelihood of the data at proposal locations, see \code{\link{pf_lik}}.
\item For sampling functions, to (re)sample plausible proposal locations, see \code{\link{pf_sample}}.
\item For tuning parameters, see \code{\link{pf_opt}}.
}
\item \code{\link[=pf_backward_*]{pf_backward_*()}} refines outputs from the forward filter:
\itemize{
\item \code{\link[=pf_backward_killer]{pf_backward_killer()}} removes dead-ends;
\item \code{\link[=pf_backward_sampler]{pf_backward_sampler()}} implements the backward sampler;
}
\item To reconstruct movement paths from particle samples, use \code{\link[=pf_path]{pf_path()}}.
\item To map emergent patterns of space use, use \code{\link[=pf_coord]{pf_coord()}} plus a \verb{map_*()} function, such as \code{\link[=map_pou]{map_pou()}}, \code{\link[=map_dens]{map_dens()}} and/or \code{\link{map_hr}}\verb{_()}.
\item For additional utilities, see supporting \verb{pf_*()} functions, such as \code{\link[=pf_plot_history]{pf_plot_history()}}, \code{\link[=pf_files]{pf_files()}} and \code{\link[=pf_files_size]{pf_files_size()}}.
}
}
\author{
Edward Lavender
}
