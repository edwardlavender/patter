% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_forward-likelihood.R
\name{pf_lik}
\alias{pf_lik}
\alias{acs_filter_land}
\alias{acs_filter_container}
\alias{pf_lik_ac}
\alias{pf_lik_dc}
\title{PF: likelihood functions}
\usage{
acs_filter_land(.particles, .obs, .t, .dlist, .drop)

acs_filter_container(.particles, .obs, .t, .dlist, .drop)

pf_lik_ac(.particles, .obs, .t, .dlist, .drop)

pf_lik_dc(.particles, .obs, .t, .dlist, .drop)
}
\arguments{
\item{.particles}{A \code{\link{data.table}} that defines proposal locations. This contains the following columns:
\itemize{
\item \code{timestep}---an \code{integer} that defines the time step;
\item \code{cell_now}---an \code{integer} that defines the grid cell(s) of proposal location(s);
\item \code{x_now},\code{y_now}---\code{double}s that define proposal location coordinates;
\item \code{loglik}---a \code{double} that defines the log-likelihood. At each time step, this begins as a vector of \code{0}s \strong{that should be progressively updated by each likelihood function}.
}}

\item{.obs, .t}{(optional) The \code{.obs} \code{\link{data.table}} (from \code{\link[=pf_forward]{pf_forward()}}) and an \code{integer} that defines the time step (used to index \code{.obs}).}

\item{.dlist}{(optional) The \code{.dlist} \code{list} (from \code{\link[=pf_forward]{pf_forward()}}).
\itemize{
\item For \code{\link[=acs_filter_land]{acs_filter_land()}}, \code{.dlist} should contain \code{.dlist$spatial$bathy} and \code{.dlist$pars$spatna}.
\item For \code{\link[=acs_filter_container]{acs_filter_container()}}, \code{.dlist} should contain \code{.dlist$pars$lonlat}.
\item For \code{\link[=pf_lik_ac]{pf_lik_ac()}}, \code{.dlist} should contain \code{.dlist$algorithm$detection_kernels} (from \code{\link[=acs_setup_detection_kernels]{acs_setup_detection_kernels()}}.
\item For \code{\link[=pf_lik_dc]{pf_lik_dc()}}, \code{.dlist} should contain \code{.dlist$spatial$bathy}.
\item For custom likelihood functions, \code{.dlist} may require other datasets.
}}

\item{.drop}{A \code{logical} variable that defines whether or not to drop \code{.particles} rows with zero likelihood.}
}
\value{
Functions return the \code{.particles} \code{\link{data.table}} for valid proposal locations and updated likelihoods (in the \code{loglik} column).
}
\description{
These are likelihood functions for the forward simulation. \code{\link[=pf_forward]{pf_forward()}} expects a named \code{list} of likelihood functions that evaluate the log-likelihood of each dataset given location proposals. Convenience functions are provided that calculate the log-likelihood of acoustic and archival data, given location proposals.
}
\details{
In \code{\link[=pf_forward]{pf_forward()}}, the log-likelihood of the data given proposal locations is evaluated using a named \code{list} of user-defined functions (one for each dataset). Each function must accept a \code{\link{data.table}} of proposal locations (\code{.particles}) alongside the arguments named above (even if they are ignored), evaluate the log-likelihood of the data and return an updated \code{\link{data.table}} for the subset of valid proposals and \emph{updated} log-likelihoods (in the \code{loglik} column). For computational efficiency, it is desirable that functions are ordered by the extent to which they invalidate proposal locations and that each function drops invalid proposals (since this reduces the number of subsequent likelihood calculations). For faster evaluations, it might also pay to group likelihood terms under a single wrapper function (since this eliminates the need to loop over individual terms in \code{\link[=.pf_lik]{.pf_lik()}}).

The following convenience functions are provided:
\itemize{
\item \code{\link[=acs_filter_land]{acs_filter_land()}} is a binary 'habitability' (land/water) filter. This is useful when the 'stochastic kick' methodology is used to generate proposal locations in systems that include inhospitable habitats. The function calculates the log-likelihood (-Inf, 0) of the 'hospitable' data given sampled particles. Location proposals in \code{NA} cells on the bathymetry grid (\code{.dlist$spatial$bathy}) are dropped.
\item \code{\link[=acs_filter_container]{acs_filter_container()}} is recommended for acoustic time series. This is a binary filter that excludes location proposals that are incompatible with acoustic container dynamics, since proposal locations must be within a moveable distance of receiver locations. Note that receivers by default are defined on a grid and the mobility term should account for this if required (see \code{\link[=check_moorings]{check_moorings()}}). \code{\link[=acs_filter_container]{acs_filter_container()}} is strictly optional but facilitates algorithm convergence by filtering location proposals that are inconsistent with the location of the next detection.
\item \code{\link[=pf_lik_ac]{pf_lik_ac()}} calculates the log-likelihood of acoustic data (detection or non detection at each operational receiver), given location proposals. Likelihood evaluations are implemented on a grid using precomputed fields for speed (see \code{\link[=acs_setup_detection_kernels]{acs_setup_detection_kernels()}}).
\item \code{\link[=pf_lik_dc]{pf_lik_dc()}} calculates the log-likelihood of archival (depth) data, given particle proposals. This is based on a modification of Lavender et al.'s (2023) depth-contour algorithm in which depth observations are considered valid (with uniform probability density) in locations whose depth's lie between a shallow and deep limit (\code{.particles$bathy - .obs$depth_shallow_eps[.t]} and \code{.particles$bathy} + \code{.obs$depth_deep_eps[.t]}) but impossible otherwise. This evaluation is necessarily implemented on a grid.
}

In \code{\link[=pf_forward]{pf_forward()}}, \code{\link[=acs_filter_container]{acs_filter_container()}} and \code{\link[=pf_lik_ac]{pf_lik_ac()}} effectively replace the role of \href{https://edwardlavender.github.io/flapper/reference/ac.html}{\code{flapper::ac()}} function. \code{\link[=pf_lik_dc]{pf_lik_dc()}} effectively replaces the role of \href{https://edwardlavender.github.io/flapper/reference/dc.html}{\code{flapper::dc()}}.
}
\seealso{
The forward filtering--backward sampling algorithm samples locations (particles) that represent the possible locations of an individual through time, accounting for all data and the individual's movement.
\itemize{
\item To set up data, use \code{\link[=pat_setup_data]{pat_setup_data()}}.
\item \code{\link[=pf_forward]{pf_forward()}} implements the forward filter:
\itemize{
\item To set up an observations timeline, use \code{\link[=pf_setup_obs]{pf_setup_obs()}}.
\item For proposal (movement) models, see \code{\link{pf_propose}}.
\item For likelihood functions, to evaluate the likelihood of the data at proposal locations, see \code{\link{pf_lik}}.
\item For sampling functions, to (re)sample plausible proposal locations, see \code{\link{pf_sample}}.
\item For tuning parameters, see \code{\link{pf_opt}}.
}
\item \code{\link[=pf_backward_*]{pf_backward_*()}} refines outputs from the forward filter:
\itemize{
\item \code{\link[=pf_backward_killer]{pf_backward_killer()}} removes dead-ends;
\item \code{\link{pf_backward_sampler}}\verb{_*()} implements the backward sampler;
}
\item To reconstruct movement paths from particle samples, use \code{\link[=pf_path]{pf_path()}}.
\item To map emergent patterns of space use, use \code{\link[=pf_coord]{pf_coord()}} plus a \verb{map_*()} function, such as \code{\link[=map_pou]{map_pou()}}, \code{\link[=map_dens]{map_dens()}} and/or \code{\link{map_hr}}\verb{_()}.
\item For additional utilities, see supporting \verb{pf_*()} functions, such as \code{\link[=pf_files]{pf_files()}}, \code{\link[=pf_files_size]{pf_files_size()}}, \code{\link[=pf_plot_history]{pf_plot_history()}}, \code{\link[=pf_diag_convergence]{pf_diag_convergence()}} and \code{\link[=pf_diag_summary]{pf_diag_summary()}}.
}
}
\author{
Edward Lavender
}
