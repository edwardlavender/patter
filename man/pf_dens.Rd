% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf-analysis.R
\name{pf_dens}
\alias{pf_dens}
\title{PF: map point density}
\usage{
pf_dens(
  .xpf,
  .coord = NULL,
  .plot = TRUE,
  .use_tryCatch = TRUE,
  .verbose = TRUE,
  .txt = "",
  ...
)
}
\arguments{
\item{.xpf}{A \code{\link{SpatRaster}} that defines the grid for density estimation and, if \code{.coord = NULL}, the points (and associated weights) that are smoothed. The coordinate reference system of \code{.xpf} must be planar and specified.}

\item{.coord}{(optional) A \code{matrix} or \code{data.frame} with x and y coordinates, in columns named \code{x} and \code{y} or \code{cell_x} and \code{cell_y}. \code{x} and \code{y} columns are used preferentially. Coordinates must be planar. A \code{mark} column can be included with coordinate weights; otherwise, equal weights are assumed (see Details). Other columns are ignored.}

\item{.plot}{A \code{logical} variable that defines whether or not to plot the output.}

\item{.use_tryCatch}{A \code{logical} variable that controls error handling:
\itemize{
\item If \code{.use_tryCatch = FALSE}, if density estimation fails with an error, the function fails with the same error.
\item If \code{.use_tryCatch = TRUE}, if density estimation fails with an error, the function produces a warning with the error message and returns \code{NULL}.
}}

\item{.verbose, .txt}{Controls on function prompts and messages (see \code{\link[=acs]{acs()}}).}

\item{...}{Arguments passed to \code{\link[spatstat.explore:density.ppp]{spatstat.explore::density.ppp()}}, such as \code{sigma} (i.e., the bandwidth).}
}
\value{
The function returns a normalised \code{\link{SpatRaster}} (or \code{NULL} if \code{\link[spatstat.explore:density.ppp]{spatstat.explore::density.ppp()}} fails and \code{.use_tryCatch = TRUE}).
}
\description{
This function creates a smoothed density map (e.g., of particle samples).
}
\details{
This function smooths (a) a \code{\link{SpatRaster}} or (b) a set of inputted coordinates:
\itemize{
\item If \code{.coords} is \code{NULL}, \code{.xpf} cell coordinates are used for density estimation and cell values are used as weights.
\item If coordinates are supplied, coordinates are re-expressed on \code{.xpf} and then used for density estimation. Equal weights are assumed unless specified. If there are duplicated coordinates, weights are updated in line with the relative frequency of coordinate pairs.
}

Coordinates and associated weights are smoothed via \code{\link[spatstat.explore:density.ppp]{spatstat.explore::density.ppp()}} into an image. Smoothing parameters such as bandwidth can be controlled via \code{...} arguments which are passed directly to this function. The output is translated into a gridded probability density surface (on the geometry defined by \code{.xpf}).
}
\examples{
#### Set up examples
# Load and attach selected packages
require(data.table)
require(dtplyr)
require(dplyr, warn.conflicts = FALSE)
require(spatstat.explore)
# Define grid
gebco   <- dat_gebco()

#### Example (1): Smooth a POU SpatRaster
# Estimate POU on a grid based on pre-prepared particle samples
out_pfb <- dat_pfb()
pou     <- pf_pou(.history = out_pfb$history, .bathy = gebco)
# Smooth POU
dens_1    <- pf_dens(pou)

#### Example (2): Smooth particle coordinates
# This approach is equivalent to Example (1) & the outputs are identical
dens_2 <- pf_dens(gebco, .coord = pf_coords(out_pfb$history, gebco))
stopifnot(all.equal(dens_1, dens_2))

#### Example (2): Smooth coordinates from other algorithms
# Define coordinates to smooth (e.g., based on COA algorithm)
out_coa <-
  # Define acoustic data for an example individual
  # (over the same time period as `out_pfb`)
  dat_acoustics |>
  filter(individual_id == 25) |>
  slice(seq_len(length(out_pfb$history))) |>
  # Calculate centres of activity over some (arbitrary) time interval
  merge(dat_moorings, by = "receiver_id") |>
  as.data.table() |>
  coa(.delta_t = "12 hours", .plot_weights = FALSE) |>
  select(x = "coa_x", y = "coa_y") |>
  as.data.frame()
# Smooth centres of activity
dens_3 <- pf_dens(gebco, .coord = out_coa)
graphics::points(out_coa)

#### Example (3): Control smoothing parameters via `spatstat.explore::density.ppp()`
# E.g. use fixed bandwidth:
pf_dens(pou, sigma = 5)
pf_dens(pou, sigma = 100)
# E.g., perform automatic bandwidth selection using cross validation:
pf_dens(pou, sigma = bw.diggle)
pf_dens(pou, sigma = bw.scott)
# pf_dens(pou, sigma = bw.CvL)  # ~12 s (slow)
# pf_dens(pou, sigma = bw.ppl)  # ~14 s (slow)
}
\author{
Edward Lavender
}
