% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/acb-classes.R
\docType{package}
\name{acb-class}
\alias{acb-class}
\title{AC-branch algorithms: \code{\linkS4class{acb}} objects}
\description{
An \code{\linkS4class{acb}} object is a S3 class that defines the named \code{list} returned by a AC-branch algorithm (i.e., \code{\link[=acs]{acs()}} or \code{\link[=dc]{dc()}}).
}
\details{
\code{\linkS4class{acb}} objects contain the following named elements:
\itemize{
\item \code{record}---\code{NULL} or a \code{list} of \code{\link{SpatRaster}}s, one for each time step, that define the set of possible locations of the individual at each time step (and their associated probability densities), according to the AC-branch algorithm. If the AC-branch function (\code{\link[=acs]{acs()}} or \code{\link[=dc]{dc()}}) is implemented with \code{.save_history = FALSE}, this element is \code{NULL}.
\item \code{map}---\code{NULL} or a \code{\link{SpatRaster}} representing the cumulative map of space use. This is the sum of the \code{\link{SpatRaster}}s from each time step, normalised by the number of time steps. For \code{\link[=acs]{acs()}} with \code{.save_cumulative = FALSE} and for \code{\link[=dc]{dc()}} this element is \code{NULL}.
\item \code{time}---a named \code{list} that records algorithm timings, including:
\itemize{
\item \code{start}---the start time;
\item \code{end}---the end time;
\item \code{duration}---the difference between the start and end time (i.e., wall time), from \code{\link{difftime}};
}
}

To write/read an \code{\linkS4class{acb}} object from file, the \code{record} \code{\link{SpatRaster}}s need to be wrapped/unwrapped (via \code{\link[terra:wrap]{terra::wrap()}} and \code{\link[terra:wrap]{terra::unwrap()}}). Helper functions may be added to do this in future, if requested.
}
\seealso{
AC-branch algorithms in \code{\link{patter}} include the AC* algorithm (\code{\link[=acs]{acs()}}) and the DC algorithm (\code{\link[=dc]{dc()}}).

To implement the AC* algorithm, use:
\enumerate{
\item \code{\link[=acs_setup_obs]{acs_setup_obs()}} to set up observations;
\item \code{\link[=acs_setup_detection_overlaps]{acs_setup_detection_overlaps()}} to identify receiver overlaps (used in detection probability calculations);
\item \code{\link[=acs_setup_detection_kernels]{acs_setup_detection_kernels()}} and \code{\link[=acs_setup_detection_pr]{acs_setup_detection_pr()}} to define detection probability kernels;
\item \code{\link[=acs]{acs()}} to implement the AC algorithm;
}

To implement the DC algorithm, use:
\enumerate{
\item \code{\link[=dc]{dc()}} to implement the algorithm;
}

AC-branch algorithms return an \code{\linkS4class{acb}} object.

AC-branch algorithms are typically followed by particle filtering to reconstruct movement paths and refine maps of space use (see \verb{pf_*()} functions).
\enumerate{
\item To begin, see \code{\link[=pf_forward_1]{pf_forward_1()}};
\item To implement AC- and PF-branch algorithms simultaneously, see \code{\link[=pf_forward_2]{pf_forward_2()}};
}
}
\author{
Edward Lavender
}
