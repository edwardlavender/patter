% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_forward-propose.R
\name{pf_propose}
\alias{pf_propose}
\alias{rkick}
\alias{dkick}
\alias{pf_rpropose_kick}
\alias{pf_rpropose_reachable}
\alias{pf_dpropose}
\title{PF: proposal functions}
\usage{
rkick(.xy0, .rstep = rstep, ..., .obs, .t, .dlist)

dkick(.xy0, .xy1, .dstep = dstep, ..., .obs, .t, .dlist)

pf_rpropose_kick(.particles, .obs, .t, .dlist, .rkick = rkick, ...)

pf_rpropose_reachable(.particles, .obs, .t, .dlist)

pf_dpropose(.particles, .obs, .t, .dlist, .drop, .dkick = dkick, ...)
}
\arguments{
\item{.xy0, .xy1, .rstep, .dstep}{Arguments for \code{.rkick} (and \code{\link[=rkick]{rkick()}}) and \code{.dkick} (and \code{\link[=dkick]{dkick()}}).
\itemize{
\item \code{.xy0}---a two-column object (\code{\link{matrix}}, \code{\link{data.frame}}, \code{\link{data.table}}) of accepted (x, y) coordinates from the previous time step. In \code{.rkick}, movement is simulated from \code{.xy0} into new locations;
\item \code{.xy1}---For \code{.dkick} and \code{\link[=dkick]{dkick()}}, \code{.xy1} is a two-column matrix of accepted coordinates for the current time step;
\item \code{.rstep} or \code{.dstep} and \code{...}---\code{function}s that simulate new locations or calculate the probability density of movements between locations (such as \code{\link[=rstep]{rstep()}} and \code{\link[=dstep]{dstep()}}) and additional arguments passed to those functions. Both functions must accept:
\itemize{
\item \code{.xy0} and \code{.xy1}---as above;
\item \code{...}---arguments passed from above;
\item \code{.lonlat}---a \code{logical} variable that defines whether or not coordinates are in longitude/latitude format or planar (extracted from \code{.dlist$pars$lonlat} by default);
}
}}

\item{.obs, .t, .dlist}{Required arguments for all functions.
\itemize{
\item \code{.obs}---the \code{.obs} \code{\link{data.table}} from \code{\link[=pf_forward]{pf_forward()}};
\item \code{.t}---an \code{integer} that defines the time step;
\item \code{.dlist}---the \code{.dlist} \code{list} from \code{\link[=pf_forward]{pf_forward()}};
\itemize{
\item For \code{\link[=rkick]{rkick()}} and \code{\link[=dkick]{dkick()}}, \code{.dlist} must contain \code{.dlist$spatial$bathy};
\item For \code{\link[=pf_rpropose_kick]{pf_rpropose_kick()}}, \code{.dlist} must contain \code{.dlist$spatial$bathy};
\item For \code{\link[=pf_rpropose_reachable]{pf_rpropose_reachable()}}, \code{.dlist} must contain \code{.dlist$spatial$bathy};
}
}}

\item{.particles, .drop}{Additional required arguments for all \code{.rpropose} and/or \code{.dpropose} functions:
\itemize{
\item \code{.particles}---a \code{\link{data.table}} of particle samples from the previous time step;
\item \code{.drop}---for \code{.dpropose}, \code{.drop} is a \code{logical} variable that defines whether or not to drop particles with zero density;
}}

\item{.rkick, .dkick, ...}{Additional arguments for \code{\link[=pf_rpropose_kick]{pf_rpropose_kick()}} and \code{\link[=pf_dpropose]{pf_dpropose()}} respectively.
\itemize{
\item \code{.rkick} is a \code{function}, like \code{\link[=rkick]{rkick()}}, that simulates new locations;
\item \code{.dkick} is a \code{function}, like \code{\link[=dkick]{dkick()}}, that calculates the probability density of movements between locations;
}

At the time of writing, these functions must accept the \code{.xy0}, \code{.xy1}, \code{.rstep}/\code{.dstep} and \code{...} arguments.}
}
\value{
In \code{\link[=pf_forward]{pf_forward()}}, \code{.rpropose} and \code{.dpropose} must return a \code{\link{data.table}}, as inputted, but including the following additional columns:
\itemize{
\item \code{.rpropose}:
\itemize{
\item \code{cell_now}---an \code{integer} vector of cell IDs;
\item \code{x_now} and \code{y_now}---\code{numeric} vectors of coordinates;
}
\item \code{.dpropose}:
\itemize{
\item \code{logdens}---a \code{numeric} vector that defines the log-probability density of movements from \verb{(x_past, y_past)} to \verb{(x_now, y_now)};
}
}
}
\description{
These are proposal functions and supporting routines for \code{\link[=pf_forward]{pf_forward()}}.
}
\details{
In \code{\link[=pf_forward]{pf_forward()}}, proposal functions are used to generate (propose) new, candidate locations for the individual's position, contingent upon previous positions (particle samples). Proposal locations are generated from previous locations via stochastic kicks and directed sampling.

The \code{.rpropose} argument in \code{\link[=pf_forward]{pf_forward()}} expects a stochastic-kick routine and \code{\link[=pf_rpropose_kick]{pf_rpropose_kick()}} is the default. This is used to simulate proposal locations by 'kicking' particles into new locations as specified by a movement model (\code{.rkick}).

\code{\link[=pf_rpropose_kick]{pf_rpropose_kick()}} is a simple wrapper for \code{\link[=rkick]{rkick()}} that passes the \code{.particles} \code{\link{data.table}} to the function as required and then updates \code{.particles} with simulated locations (\code{x_now} and \code{y_now} columns). Stochastic kicks are implemented iteratively to avoid inhospitable habitats (\code{NA}s on \code{.dlist$spatial$bathy}). Coordinates are defined on a continuous domain, as required to ensure consistency among routines, but grid cells IDs (on \code{.dlist$spatial$bathy}) are included in the output (in a \code{cell_now} column). (Proposals beyond the grid that remain after all iterations are silently dropped.) This means that the simulation of stochastic kicks remains accurate irrespective of the spatial resolution of likelihood evaluations (i.e., whether or not likelihoods are evaluated at particle locations or on a grid). \code{\link[=rkick]{rkick()}} itself is a wrapper for \code{.rstep} = \code{\link{rstep}} that accepts (but silently ignores) the \code{.obs}, \code{.t} and \code{.dlist} objects (except \code{.dlist$pars$lonlat}, which is passed to the \code{.lonlat} argument of \code{.rstep}). In \code{\link{pf_rpropose_kick}}, arguments passed via \code{...} are passed to \code{.rkick}, which under default settings means \verb{.rstep = } = \code{\link{rstep}} (i.e., \code{.rlen} and \code{.rang} or additional arguments passed to those arguments). Under the default routines, particles are kicked in two dimensions.

In \code{\link[=pf_forward]{pf_forward()}}, if stochastic kicks fail to produce a sufficient number of valid particle samples, \code{\link[=pf_rpropose_reachable]{pf_rpropose_reachable()}} may be called under-the-hood for directed sampling (see \code{\link[=pf_opt_trial]{pf_opt_trial()}}). For selected particles, this function identifies the set of reachable locations, by drawing a circle of radius \code{.obs$mobility[.t]} around each particle at time \code{.t}. The coordinates of reachable locations (within these circles) are defined at the centroids of each grid cell. We evaluate the likelihood of reachable locations and the log-probability density of moving into each location and then sample locations according to the (normalised) product of the likelihoods and movement densities. The \code{.dpropose} argument in \code{\link[=pf_forward]{pf_forward()}} is required to calculate the log-probability density of moving between locations. \code{.dpropose} is a function that must accept the usual \code{.particles}, \code{.obs}, \code{.t}, \code{.dlist} and \code{...} arguments and return a \code{\link{data.table}}, for the subset of valid locations, with a \code{logdens} column that defines log-probability densities. The function must be able to handle empty \code{\link{data.table}}s, which are passed down the call stack if all proposal (reachable) locations have negative infinity log-likelihood. Note that since in \code{\link[=pf_rpropose_reachable]{pf_rpropose_reachable()}} coordinates are necessarily defined on a grid, a discretisation error is introduced that can prevent movement into valid cells, even if the edges of those cells are reachable, since coordinates are defined at cell centres. In general, this error should be negligible, but it may be important with low-resolution grids and/or in situations where there are very few valid locations. A possible solution in this instance is to increase \code{.obs$mobility} and the \code{.mobility} (maximum moveable distance) parameter for \code{.dpropose} (but not \code{.rpropose}) by half a grid cell. This is not currently implemented automatically.

\code{\link[=pf_dpropose]{pf_dpropose()}} is the default \code{.dpropose} routine. Under default settings, this is a simple wrapper for \code{\link[=dkick]{dkick()}} that handles empty \link{data.table}s or passes the relevant coordinate columns, for the accepted locations from the previous time step ((\code{x_past}, \code{y_past}) in \code{.particles}) and the proposal locations for the current time step ((\code{x_now}, \code{y_now}) in \code{.particles}) to \code{log(.dkick(...))}. Under default settings, \verb{.dkick =} \code{\link{dkick}}. \code{\link[=dkick]{dkick()}} wraps itself wraps a \code{.dstep} function such as \code{\link[=dstep]{dstep()}}, accepting (but silently ignoring) the \code{.obs}, \code{.t} and \code{.dlist} arguments (except \code{.dlist$pars$lonlat}). In this situation, \code{...} arguments are passed to \code{.dstep}.

In \code{\link[=pf_forward]{pf_forward()}}, use \code{.rpropose} and \code{.dpropose} to write fully custom routines, if required. Use \code{.rargs} and \code{.dargs} to customise the default routines. For movement models that require \code{.obs}, \code{.t} and \code{.dlist}, use custom \code{.rkick} and \code{.dkick} functions. Otherwise, you can simply customise \code{.rstep} and \code{.dstep} (for instance, by revising the models used to simulate step lengths and turning angles, or the parameters passed to those models).

For consistency, all proposal functions should account for the maximum moveable distance in a given time step. In the default routines:
\itemize{
\item \code{\link[=pf_rpropose_kick]{pf_rpropose_kick()}} uses a \code{.mobility} parameter that is passed down to \code{\link[=rtruncgamma]{rtruncgamma()}} that prevents kicks exceeding the moveable distance;
\item \code{\link[=pf_rpropose_reachable]{pf_rpropose_reachable()}} uses \code{.obs$mobility} to define reachable locations;
\item \code{\link[=pf_dpropose]{pf_dpropose()}} uses a \code{.mobility} parameter that is passed down to \code{\link[=dtruncgamma]{dtruncgamma()}} that eliminates kicks exceeding the moveable distance;
}
}
\seealso{
The particle filter samples locations (particles) that represent the possible locations of an individual through time, accounting for the data and the individual's movement.
\itemize{
\item To set up data, use \code{\link[=pat_setup_data]{pat_setup_data()}}.
\item To implement the particle filter, use \code{\link[=pf_forward]{pf_forward()}}:
\itemize{
\item To set up an observations timeline, use \code{\link[=pf_setup_obs]{pf_setup_obs()}};
\item For proposal (movement) models, see \code{\link{pf_propose}};
\item For likelihood functions, to evaluate the likelihood of the data at proposal locations, see \code{\link{pf_lik}};
\item For sampling functions, to (re)sample plausible proposal locations, see \code{\link{pf_sample}};
\item For tuning parameters, see \code{\link{pf_opt}};
}
\item To map patterns of space use, use:
\itemize{
\item The backward smoother (TO DO);
\item \code{\link[=pf_coord]{pf_coord()}} to extract coordinates;
\item A \verb{map_*()} function, such as \code{\link[=map_pou]{map_pou()}}, \code{\link[=map_dens]{map_dens()}} and/or \code{\link{map_hr}}\verb{_()};
}
\item To reconstruct movement paths, use the backward sampler (TO DO).
\item For additional utilities, see supporting \verb{pf_*()} functions, such as \code{\link[=pf_files]{pf_files()}}, \code{\link[=pf_files_size]{pf_files_size()}}, \code{\link[=pf_plot_history]{pf_plot_history()}} and \code{\link[=pf_diag_summary]{pf_diag_summary()}}.
}
}
\author{
Edward Lavender
}
