% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_forward.R
\name{pf_opt}
\alias{pf_opt}
\alias{pf_opt_trial}
\alias{pf_opt_record}
\alias{pf_opt_control}
\alias{pf_opt_rerun_from}
\title{PF: simulation options}
\usage{
pf_opt_trial(
  .trial_origin_crit = 1L,
  .trial_origin = 1L,
  .trial_kick_crit = 1L,
  .trial_kick = 1L,
  .trial_sampler_crit = 10L,
  .trial_sampler = 1L,
  .trial_revert_crit = 1L,
  .trial_revert_steps = 10L,
  .trial_revert = 2L
)

pf_opt_record(.save = FALSE, .cols = NULL, .sink = NULL)

pf_opt_control(.sampler_batch_size = 2L)

pf_opt_rerun_from(.rerun, .revert = 25L)
}
\arguments{
\item{.trial_origin_crit, .trial_origin, .trial_kick_crit, .trial_kick, .trial_sampler_crit, .trial_sampler, .trial_revert_crit, .trial_revert_steps, .trial_revert}{\code{\link[=pf_opt_trial]{pf_opt_trial()}} arguments used to tune convergence properties. All arguments expect \code{integer}s.
\itemize{
\item \verb{.trial_\{step\}} arguments define the number of times to trial a stochastic process at each time step (before giving up).
\item \verb{.trial_\{step\}_crit} arguments define the number of valid, unique proposal locations (grid cells) required to trigger a repeated trial.
}

For example, if after kicking previous particles into proposal locations and evaluating the likelihood of each location only 10 unique particles remain, the stochastic process is repeated up to \code{.trial_kick} times or until the number of valid proposals exceeds \code{.trial_kick_crit} (see Details). In full:
\itemize{
\item \code{.trial_origin_crit} is the critical threshold for the starting samples. If the number of unique, valid starting locations is <= \code{.trial_origin_crit}, sampling is repeated up to \code{.trial_origin} times.
\item \code{trial_kick_crit} is the critical threshold for stochastic kicks. If the number of unique, valid proposals is <= \code{trial_kick_crit}, the process of kicking and sampling particles (via \code{.rpropose} and \code{.sample}) is repeated up to \code{.trial_kick} times. Use \code{.trial_kick = 0L} to suppress stochastic kicks.
\item \code{.trial_sampler_crit} is the critical threshold for directed sampling. Following stochastic kicks, if the number of unique, valid proposals remains <= \code{.trial_sampler_crit}, directed sampling is implemented. Samples are redrawn up to \code{.trial_sampler} times. Use \code{.trial_sampler_crit = 0L} to suppress directed sampling.
\item \code{.trial_revert_crit} is the critical threshold for a reversion. If the number of unique, valid proposal locations is <= \code{.trial_revert_crit}, the algorithm reverts by \code{.trial_revert_steps} time steps to an earlier time step (time step two or greater). \code{.trial_revert} is the total number of reversions permitted. This is reset on algorithm reruns (see \code{.rerun}).
}}

\item{.save, .sink, .cols}{\code{\link[=pf_opt_record]{pf_opt_record()}} arguments, passed to \code{.record} in \code{\link[=pf_forward]{pf_forward()}}.
\itemize{
\item \code{.save}---a \code{logical} variable that defines whether or not to save particle samples and diagnostics in memory. Use \code{.save = TRUE} with caution.
\item \code{.sink}---a \code{character} string that defines a (usually) empty directory in which to write particle samples and diagnostics. \verb{\{.sink\}/history/}and \code{{.sink}/diagnostics} directories are created (if necessary) to store particle samples and diagnostics respectively.
\item \code{.cols}---a \code{character} vector that defines the names of the columns in particle-sample \code{\link{data.table}}s to save and/or write to file at each time step. This reduces the space occupied by outputs. For \code{\link[=pf_backward_killer]{pf_backward_killer()}}, you need to retain \code{timestep}, \code{cell_past} and \code{cell_now}. For \code{\link[=pf_backward_sampler]{pf_backward_sampler()}}, you need \code{timestep}, \code{cell_now}, \code{x_now} and \code{y_now} for the backward sampler. For calculation of effective sample size, \code{lik} is required. \code{NULL} retains all columns.
}

At least one of \code{.save = TRUE} and \code{.sink} must be set.}

\item{.sampler_batch_size}{\code{\link[=pf_opt_control]{pf_opt_control()}} arguments, passed to \code{.control} in \code{\link[=pf_forward]{pf_forward()}}.
\itemize{
\item \code{.sampler_batch_size}---an \code{integer} that controls the batch size (the number of particles processed simultaneously) in directed sampling. Increase the batch size to improve speed; decrease the batch size to avoid memory constraints. The appropriate batch size depends on grid resolution and memory availability.
}}

\item{.rerun, .revert}{\code{\link[=pf_opt_rerun_from]{pf_opt_rerun_from()}} arguments.
\itemize{
\item \code{.rerun} is a named \code{list} of algorithm outputs from a previous run.
\item \code{.revert} is an \code{integer} that defines the number of steps to revert.
}}
}
\value{
\itemize{
\item \code{\link[=pf_opt_trial]{pf_opt_trial()}} returns a named \code{list};
\item \code{\link[=pf_opt_record]{pf_opt_record()}} returns a named \code{list};
\item \code{\link[=pf_opt_control]{pf_opt_control()}} returns a named \code{list};
\item \code{\link[=pf_opt_rerun_from]{pf_opt_rerun_from()}} returns an \code{integer};
}
}
\description{
These functions define selected function arguments for \code{\link[=pf_forward]{pf_forward()}}.
}
\details{
These functions are defined separately for convenience of documentation. Note that they do not define global options and must be passed to \code{\link[=pf_forward]{pf_forward()}} arguments.
}
\examples{
pf_opt_trial()
pf_opt_trial(.trial_kick_crit = 10L, .trial_kick = 2L)
pf_opt_record(.save = TRUE)
pf_opt_control()
pf_opt_rerun_from(dat_pff(), .revert = 10L)

}
\seealso{
The forward filtering--backward sampling algorithm samples locations (particles) that represent the possible locations of an individual through time, accounting for all data and the individual's movement.
\itemize{
\item To set up data, use \code{\link[=pat_setup_data]{pat_setup_data()}}.
\item \code{\link[=pf_forward]{pf_forward()}} implements the forward filter:
\itemize{
\item To set up an observations timeline, use \code{\link[=pf_setup_obs]{pf_setup_obs()}}.
\item For proposal (movement) models, see \code{\link{pf_propose}}.
\item For likelihood functions, to evaluate the likelihood of the data at proposal locations, see \code{\link{pf_lik}}.
\item For sampling functions, to (re)sample plausible proposal locations, see \code{\link{pf_sample}}.
\item For tuning parameters, see \code{\link{pf_opt}}.
}
\item \code{\link[=pf_backward_*]{pf_backward_*()}} refines outputs from the forward filter:
\itemize{
\item \code{\link[=pf_backward_killer]{pf_backward_killer()}} removes dead-ends;
\item \code{\link[=pf_backward_sampler]{pf_backward_sampler()}} implements the backward sampler;
}
\item To reconstruct movement paths from particle samples, use \code{\link[=pf_path]{pf_path()}}.
\item To map emergent patterns of space use, use \code{\link[=pf_coord]{pf_coord()}} plus a \verb{map_*()} function, such as \code{\link[=map_pou]{map_pou()}}, \code{\link[=map_dens]{map_dens()}} and/or \code{\link{map_hr}}\verb{_()}.
\item For additional utilities, see supporting \verb{pf_*()} functions, such as \code{\link[=pf_files]{pf_files()}}, \code{\link[=pf_files_size]{pf_files_size()}}, \code{\link[=pf_plot_history]{pf_plot_history()}}, \code{\link[=pf_diag_convergence]{pf_diag_convergence()}} and \code{\link[=pf_diag_summary]{pf_diag_summary()}}.
}
}
\author{
Edward lavender
}
