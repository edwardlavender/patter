% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_files.R
\name{pf_files}
\alias{pf_files}
\alias{pf_files_size}
\title{PF: list files}
\usage{
pf_files(.sink, .folder = NULL, ...)

pf_files_size(.sink, .folder = NULL, ..., .unit = c("MB", "GB", "TB"))
}
\arguments{
\item{.sink}{A \code{character} string that defines the directory in which files are located.}

\item{.folder}{(optional) A \code{character} string that defines the name of a sub-folder for which to list files (via \code{\link[=pf_files]{pf_files()}}) or summarise file sizes (via \code{\link[=pf_files_size]{pf_files_size()}}).}

\item{...}{A placeholder for additional arguments passed to \code{\link[=list.files]{list.files()}}, such as \code{pattern}, excluding \code{full.names}.}

\item{.unit}{For \code{\link[=pf_files_size]{pf_files_size()}}, \code{.unit} is a \code{character} string that defines the units of the output (\code{MB}, \code{GB}, \code{TB}).}
}
\value{
\itemize{
\item \code{\link[=pf_files]{pf_files()}} returns an ordered \code{list} of file paths.
\item \code{\link[=pf_files_size]{pf_files_size()}} returns a number.
}
}
\description{
\code{\link[=pf_files]{pf_files()}} creates an ordered \code{list} of numbered files.

\code{\link[=pf_files_size]{pf_files_size()}} calculates the total size of all files.
}
\details{
\code{\link[=pf_files]{pf_files()}} expects listed files to be named \verb{1.\{.ext\}}, \verb{2.\{.ext\}}, ..., \verb{N.\{.ext\}}. All listed files must share the same file extension.

The function is normally used to to create an ordered \code{list} of the \code{parquet} files that contain particle samples, but it can be used in any situation with files named as described above (e.g., to \code{list} \code{png} files from \code{\link[=pf_plot_history]{pf_plot_history()}}).

\code{\link[=pf_files_size]{pf_files_size()}} can be used to estimate the total file size in any directory.
}
\examples{
# Use `pf_files()` to list files
# * Use example files from `pf_forward()`
pff_folder <- dat_pff_src()
files <- pf_files(.sink = pff_folder)

# Use `pf_files_size()` to calculate file size
pf_files_size(pff_folder)
pf_files_size(pff_folder, .unit = "GB")
pf_files_size(pff_folder, .unit = "TB")

}
\seealso{
The forward filtering--backward sampling algorithm samples locations (particles) that represent the possible locations of an individual through time, accounting for all data and the individual's movement.
\itemize{
\item To set up data, use \code{\link[=pat_setup_data]{pat_setup_data()}}.
\item \code{\link[=pf_forward]{pf_forward()}} implements the forward filter:
\itemize{
\item To set up an observations timeline, use \code{\link[=pf_setup_obs]{pf_setup_obs()}}.
\item For proposal (movement) models, see \code{\link{pf_propose}}.
\item For likelihood functions, to evaluate the likelihood of the data at proposal locations, see \code{\link{pf_lik}}.
\item For sampling functions, to (re)sample plausible proposal locations, see \code{\link{pf_sample}}.
\item For tuning parameters, see \code{\link{pf_opt}}.
}
\item \code{\link[=pf_backward_*]{pf_backward_*()}} refines outputs from the forward filter:
\itemize{
\item \code{\link[=pf_backward_killer]{pf_backward_killer()}} removes dead-ends;
\item \code{\link{pf_backward_sampler}}\verb{_*()} implements the backward sampler;
}
\item To reconstruct movement paths from particle samples, use \code{\link[=pf_path]{pf_path()}}.
\item To map emergent patterns of space use, use \code{\link[=pf_coord]{pf_coord()}} plus a \verb{map_*()} function, such as \code{\link[=map_pou]{map_pou()}}, \code{\link[=map_dens]{map_dens()}} and/or \code{\link{map_hr}}\verb{_()}.
\item For additional utilities, see supporting \verb{pf_*()} functions, such as \code{\link[=pf_files]{pf_files()}}, \code{\link[=pf_files_size]{pf_files_size()}}, \code{\link[=pf_plot_history]{pf_plot_history()}}, \code{\link[=pf_diag_convergence]{pf_diag_convergence()}} and \code{\link[=pf_diag_summary]{pf_diag_summary()}}.
}
}
\author{
Edward Lavender
}
