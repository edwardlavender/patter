% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_backward_killer.R
\name{pf_backward}
\alias{pf_backward}
\title{PF: run the backward pass}
\usage{
pf_backward(
  .history,
  .save_history = FALSE,
  .write_history = NULL,
  .progress = TRUE,
  .verbose = TRUE,
  .txt = ""
)
}
\arguments{
\item{.history}{Particle samples from the forward simulation, provided either as:
\itemize{
\item A \code{list} of \code{\link{data.table}}s that define cell samples; i.e., the \code{history} element of a \code{\linkS4class{pf}} object. This must contain columns that define cell samples at each time step (\code{cell_now}) alongside previous samples (\code{cell_past}).
\item An ordered list of file paths (from \code{\link[=pf_setup_files]{pf_setup_files()}}) that define the directories in which particle samples were written from the forward simulation (as parquet files).
}}

\item{.save_history}{A logical variable that defines whether or not to save updated particle samples in memory (see \code{\link[=pf_forward_1]{pf_forward_1()}}).}

\item{.write_history}{A named list, passed to \code{\link[arrow:write_parquet]{arrow::write_parquet()}}, to write updated particle samples to file (see \code{\link[=pf_forward_1]{pf_forward_1()}}).}

\item{.progress, .verbose, .txt}{Arguments to monitor function progress (see \code{\link[=pf_forward_1]{pf_forward_1()}}).}
}
\value{
The function returns a \code{\linkS4class{pf}} object.
}
\description{
This function implements the backward correction of particle samples.
}
\details{
At the time of writing, this function only removes 'dead ends' from particle samples. Backwards smoothing is not currently implemented.
}
\examples{
#### Set up examples
# A. Define input datasets (see ?`acs_setup_obs()`)
# (Here, we used pre-defined outputs for speed)
obs <- dat_obs()
# B. Implement AC-branch algorithm (see ?`acs()` or ?`dc()`)
out_ac <- dat_ac()
# C. Implement forward simulation (see ?`pf_forward_*()`)
con <- tempdir()
pff_folder <- file.path(tempdir(), "patter", "pf", "forward")
dir.create(pff_folder, recursive = TRUE)
out_pff <- pf_forward_1(.obs = obs,
                        .record = out_ac$record,
                        .n = 1e3,
                        .kick = pf_kick,
                        .save_history = TRUE,
                        .write_history = list(sink = pff_folder))

#### Example (1): Implement backward simulation from `pf` object
out_pfb <- pf_backward(out_pff$history, .save_history = TRUE)

#### Example (2): Implement backward simulation from parquet files
out_pfb <- pf_backward(pf_setup_files(pff_folder),
                       .save_history = TRUE)

#### Example (3): Write history to file (as in `pf_forward_*()`)
pfb_folder <- file.path(con, "patter", "pf", "backward")
dir.create(pfb_folder, recursive = TRUE)
out_pfb <- pf_backward(pf_setup_files(pff_folder),
                       .write_history = list(sink = pfb_folder))
utils::head(list.files(pfb_folder))

#### Example (4): Control monitoring of function progress
# Suppress progress bar
out_pfb <- pf_backward(pf_setup_files(pff_folder),
                       .save_history = TRUE,
                       .progress = FALSE)
# Save messages
log.txt <- tempfile(fileext = ".txt")
out_pfb <- pf_backward(pf_setup_files(pff_folder),
                       .save_history = TRUE,
                       .txt = log.txt)
utils::head(readLines(log.txt), 15)
# Suppress messages
out_pfb <- pf_backward(pf_setup_files(pff_folder),
                       .save_history = TRUE,
                       .verbose = FALSE)

# Clean up
unlink(file.path(con, "patter"), recursive = TRUE)
}
\seealso{
TO DO
}
\author{
Edward Lavender
}
