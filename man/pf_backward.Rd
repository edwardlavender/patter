% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_backward.R
\name{pf_backward}
\alias{pf_backward}
\title{PF: backward simulation}
\usage{
pf_backward(
  .history,
  .save_history = FALSE,
  .write_history = NULL,
  .progress = TRUE,
  .verbose = TRUE,
  .con = ""
)
}
\arguments{
\item{.history}{Particle samples from the forward simulation, provided either as:
\itemize{
\item A \code{list} of \code{\link{data.table}}s that define cell samples; i.e., the \code{history} element of a \code{\linkS4class{pf}} object. This must contain columns that define cell samples at each time step (\code{cell_now}) alongside previous samples (\code{cell_past}).
\item An ordered list of file paths (from \code{\link[=pf_setup_record]{pf_setup_record()}}) that define the directories in which particle samples were written from the forward simulation (as parquet files).
}}

\item{.save_history}{A logical variable that defines whether or not to save updated particle samples in memory (see \code{\link[=pf_forward]{pf_forward()}}).}

\item{.write_history}{A named list, passed to \code{\link[arrow:write_parquet]{arrow::write_parquet()}}, to write updated particle samples to file (see \code{\link[=pf_forward]{pf_forward()}}).}

\item{.progress, .verbose, .con}{Arguments to monitor function progress (see \code{\link[=pf_forward]{pf_forward()}}).}
}
\value{
The function returns a \code{\linkS4class{pf}} object.
}
\description{
This function implements the backward correction of particle samples.
}
\details{
At the time of writing, this function only removes 'dead ends' from particle samples. Backwards smoothing is not currently implemented.
}
\examples{
#### Set up examples

# (A) Define input datasets
acoustics <- dat_acoustics[individual_id == 25, ]
archival <- dat_archival[individual_id == 25, ]
obs <- acs_setup_obs(acoustics, archival, "2 mins", 500)
obs <- obs[1:200, ]
gebco <- dat_gebco()

# (B) Implement AC* algorithm
dat_moorings$receiver_range <- 500
containers <- acs_setup_detection_containers(gebco, dat_moorings)
overlaps <- acs_setup_detection_overlaps(containers, dat_moorings)
kernels <-
  acs_setup_detection_kernels(dat_moorings,
                              .calc_detection_pr = acs_setup_detection_pr,
                              .bathy = gebco)
ac_folder <- file.path(tempdir(), "ac")
dir.create(ac_folder)
out_ac <-
  acs(obs,
      .bathy = gebco,
      .detection_overlaps = overlaps,
      .detection_kernels = kernels,
      .save_record = TRUE)

# (C) Implement forward simulation
forward_folder <- file.path(tempdir(), "pf", "forward")
dir.create(forward_folder, recursive = TRUE)
out_pff <- pf_forward(.obs = obs,
                      .record = out_ac$record,
                      .n = 1e3,
                      .kick = pf_setup_kick,
                      .bathy = gebco,
                      .save_history = TRUE,
                      .write_history = list(sink = forward_folder))

#### Example (1): Implement backward simulation from `pf` object
out_pfb <- pf_backward(out_pff$history, .save_history = TRUE)

#### Example (2): Implement backward simulation from parquet files
out_pfb <- pf_backward(pf_setup_record(forward_folder),
                       .save_history = TRUE)

#### Example (3): Write history to file (as in `pf_forward()`)
backward_folder <- file.path(tempdir(), "pf", "backward")
dir.create(backward_folder, recursive = TRUE)
out_pfb <- pf_backward(pf_setup_record(forward_folder),
                       .write_history = list(sink = backward_folder))
utils::head(list.files(backward_folder))

#### Example (4): Control monitoring of function progress
# Suppress progress bar
out_pfb <- pf_backward(pf_setup_record(forward_folder),
                       .save_history = TRUE,
                       .progress = FALSE)
# Save messages
log.txt <- tempfile(fileext = ".txt")
out_pfb <- pf_backward(pf_setup_record(forward_folder),
                       .save_history = TRUE,
                       .con = log.txt)
utils::head(readLines(log.txt), 15)
# Suppress messages
out_pfb <- pf_backward(pf_setup_record(forward_folder),
                       .save_history = TRUE,
                       .verbose = FALSE)
}
\seealso{
\code{\link[=pf_forward]{pf_forward()}} implements the forward simulation.
}
\author{
Edward Lavender
}
